name: Create Release

on:
  workflow_dispatch:
    inputs:
      revision:
        description: 'Git SHA or ref (defaults to current commit)'
        required: false
        default: ''
      platforms:
        description: 'Comma-separated platforms (linux,macos,windows)'
        required: false
        default: 'linux,macos,windows'

permissions:
  contents: write
  id-token: write
  pull-requests: read

concurrency:
  group: release-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  S3_BUCKET: entropy-builds

jobs:
  # ────────────────────────────────────────────────────────────────
  # Prepare outputs & sanitize inputs
  # ────────────────────────────────────────────────────────────────
  prepare:
    runs-on: ubuntu-latest
    outputs:
      revision: ${{ steps.resolve.outputs.revision }}
      platforms: ${{ steps.sanitize-platforms.outputs.platforms }}
      base_version: ${{ steps.parse.outputs.base_version }}
      release_version: ${{ steps.parse.outputs.release_version }}
      tag_exists: ${{ steps.check-tag.outputs.tag_exists }}
      missing_platforms: ${{ steps.check-s3-release.outputs.missing_platforms }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve revision
        id: resolve
        run: |
          REV="${{ github.event.inputs.revision }}"
          if [[ -z "$REV" ]]; then
            REV="${GITHUB_SHA}"
          elif git rev-parse --verify "$REV" >/dev/null 2>&1; then
            REV=$(git rev-parse "$REV")
          else
            echo "Invalid revision input: $REV"
            exit 1
          fi
          echo "revision=$REV" >> $GITHUB_OUTPUT

      - name: Sanitize platforms
        id: sanitize-platforms
        run: |
          PLATFORMS="${{ github.event.inputs.platforms }}"
          VALID_PLATFORMS=("linux" "macos" "windows")
          SANITIZED=()

          IFS=',' read -ra INPUT <<< "$PLATFORMS"
          for PLATFORM in "${INPUT[@]}"; do
            PLATFORM=$(echo "$PLATFORM" | xargs) # Trim spaces
            if [[ " ${VALID_PLATFORMS[@]} " =~ " $PLATFORM " ]]; then
              SANITIZED+=("$PLATFORM")
            fi
          done

          echo "platforms=$(IFS=,; echo "${SANITIZED[*]}")" >> $GITHUB_OUTPUT

      - name: Parse project version
        id: parse
        run: |
          BASE=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          # strip build-suffix and metadata → e.g. “0.2.0-ALPHA.42+…” → “0.2.0-ALPHA”
          REL=$(echo "$BASE" | sed -E 's/(\.[0-9]+)?(\+.*)?$//')
          echo "base_version=$BASE"      >> $GITHUB_OUTPUT
          echo "release_version=$REL"    >> $GITHUB_OUTPUT

      - name: Check for existing Git tag
        id: check-tag
        run: |
          TAG="v${{ steps.parse.outputs.release_version }}"
          if git ls-remote --exit-code --tags origin "refs/tags/$TAG" >/dev/null; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "Release tag $TAG already exists."
            exit 1
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::400389109701:role/GHA-entropy-DeployRole
          aws-region: us-east-1

      - name: Check S3 for missing artifacts
        id: check-s3-release
        run: |
          IFS=',' read -ra PL <<< "${{ steps.sanitize-platforms.outputs.platforms }}"
          MISSING=()

          for OS in "${PL[@]}"; do
            if ! aws s3 ls "s3://$S3_BUCKET/${{ steps.resolve.outputs.revision }}/${OS}/" | grep -q '\.jar'; then
              MISSING+=("$OS")
            fi
          done

          echo "missing_platforms=$(IFS=,; echo "${MISSING[*]}")" >> $GITHUB_OUTPUT

  # ────────────────────────────────────────────────────────────────
  # Release build & upload artifacts
  # ────────────────────────────────────────────────────────────────
  build-missing:
    name: Build Missing Artifacts
    needs: prepare
    if: ${{ needs.prepare.outputs.tag_exists == 'false' && needs.prepare.outputs.missing_platforms != '' }}
    uses: ./.github/workflows/build.yaml
    with:
      revision: ${{ needs.prepare.outputs.revision }}
      platforms: ${{ needs.prepare.outputs.missing_platforms }}
    secrets: inherit

  # ────────────────────────────────────────────────────────────────
  # Release build & upload artifacts
  # ────────────────────────────────────────────────────────────────
  release:
    needs: [ prepare, build-missing ]
    if: ${{ needs.prepare.outputs.tag_exists == 'false' && (needs.prepare.outputs.missing_platforms == '' || needs.build-missing.result == 'success') }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.revision }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::400389109701:role/GHA-entropy-DeployRole
          aws-region: us-east-1

      - name: Download artifacts from S3
        id: download-artifacts
        run: |
          IFS=',' read -ra PL <<< "${{ needs.prepare.outputs.platforms }}"
          for OS in "${PL[@]}"; do
            ARTIFACT="entropy-${{ needs.prepare.outputs.release_version }}-${OS}.jar"
            S3_URI="s3://$S3_BUCKET/${{ needs.prepare.outputs.revision }}/${OS}/$ARTIFACT"

            echo "Downloading $ARTIFACT from $S3_URI..."
            aws s3 cp "$S3_URI" "./$ARTIFACT"

            if [[ $? -ne 0 ]]; then
              echo "Failed to download $ARTIFACT from $S3_URI"
              exit 1
            fi
          done

      - name: Verify artifact version
        run: |
          PROJECT_VERSION="${{ needs.prepare.outputs.release_version }}"
          for FILE in *.jar; do
            FILE_VERSION=$(echo "$FILE" | sed -E 's/^entropy-([0-9]+\.[0-9]+\.[0-9]+-[A-Z]+\.[0-9]+)-[a-z]+\.jar$/\1/')
            if [[ "$FILE_VERSION" != "$PROJECT_VERSION" ]]; then
              echo "Version mismatch: $FILE_VERSION (artifact) vs $PROJECT_VERSION (project)"
              exit 1
            fi
          done

      - name: Set up Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create & push Git tag
        run: |
          TAG="v${{ needs.prepare.outputs.release_version }}"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v${{ needs.prepare.outputs.release_version }}"
          REV="${{ needs.prepare.outputs.revision }}"
          PRFLAG=$([[ "${{ needs.prepare.outputs.base_version }}" == *-* ]] && echo "--prerelease")
          gh release create "$TAG" \
            --target "$REV" \
            --verify-tag \
            --generate-notes \
            $PRFLAG

      - name: Attach artifacts to release
        run: |
          TAG="v${{ needs.prepare.outputs.release_version }}"
          for FILE in *.jar; do
            gh release upload "$TAG" "$FILE"
          done

      - name: Write release summary
        run: |
          TAG="v${{ needs.prepare.outputs.release_version }}"
          REV="${{ needs.prepare.outputs.revision }}"
          PFS="${{ needs.prepare.outputs.platforms }}"
          REPO="${{ github.repository }}"
          URL="https://github.com/$REPO/releases/tag/$TAG"

          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## 🚀 Release Summary

          - 🏷️ **Tag:** [\`$TAG\`]($URL)
          - 🔁 **Revision:** \`$REV\`
          - 💻 **Platforms:** \`$PFS\`

          _View full release details:_ [$URL]($URL)
          EOF
