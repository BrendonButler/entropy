name: Build & Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ '**' ]
  workflow_call:
    inputs:
      revision:
        description: 'Git SHA or ref to build'
        required: false
        type: string
      platforms:
        description: 'Comma-separated platforms to build (linux,macos,windows)'
        required: false
        type: string
  workflow_dispatch:
    inputs:
      revision:
        description: 'Git SHA or ref to build'
        required: false
        default: ''
        type: string
      platforms:
        description: 'Comma-separated platforms (linux,macos,windows)'
        required: false
        default: 'linux,macos,windows'
        type: string

permissions:
  id-token: write
  contents: read

concurrency:
  group: build-${{ github.workflow }}-${{ github.event.inputs.revision || github.sha }}
  cancel-in-progress: true

jobs:
  # ────────────────────────────────────────────────────────────────
  # Prepare outputs & sanitize inputs
  # ────────────────────────────────────────────────────────────────
  prepare:
    runs-on: ubuntu-latest
    outputs:
      revision: ${{ steps.resolve.outputs.revision }}
      platforms: ${{ steps.sanitize-platforms.outputs.platforms }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve revision
        id: resolve
        run: |
          REV="${{ github.event.inputs.revision }}"

          if [[ -z "$REV" ]]; then
            REV="${GITHUB_SHA}"
          elif git rev-parse --verify "$REV" >/dev/null 2>&1; then
            REV=$(git rev-parse "$REV")
          else
            echo "Invalid revision input: $REV"
            exit 1
          fi

          echo "revision=$REV" >> $GITHUB_OUTPUT

      - name: Sanitize platforms
        id: sanitize-platforms
        run: |
          PLATFORMS="${{ github.event.inputs.platforms }}"
          VALID_PLATFORMS=("linux" "macos" "windows")
          SANITIZED=()

          # Default to all valid platforms if input is blank
          if [[ -z "$PLATFORMS" ]]; then
            PLATFORMS=$(IFS=,; echo "${VALID_PLATFORMS[*]}")
          fi

          IFS=',' read -ra INPUT <<< "$PLATFORMS"

          for PLATFORM in "${INPUT[@]}"; do
            PLATFORM=$(echo "$PLATFORM" | xargs) # Trim spaces

            if [[ " ${VALID_PLATFORMS[@]} " =~ " $PLATFORM " ]]; then
              SANITIZED+=("$PLATFORM")
            fi
          done

          echo "platforms=$(IFS=,; echo "${SANITIZED[*]}")" >> $GITHUB_OUTPUT

  # ────────────────────────────────────────────────────────────────
  # Build & Test only (no S3 artifacts) on feature branches & PRs
  # ────────────────────────────────────────────────────────────────
  build-test:
    needs: prepare
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.revision }}

      - name: Set up Java 21 & cache Maven
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      - name: Build & run tests
        run: mvn clean verify -Plinux

  # ────────────────────────────────────────────────────────────────
  # Package & Upload to S3 on main or manual dispatch
  # ────────────────────────────────────────────────────────────────
  package:
    needs: [ prepare, build-test ]
    if: >
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'workflow_call' ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            runner: ubuntu-latest
          - os: macos
            runner: macos-latest
          - os: windows
            runner: windows-latest

    env:
      S3_BUCKET: entropy-builds

    steps:
      - name: Checkout code
        if: ${{ contains(needs.prepare.outputs.platforms, matrix.os) }}
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.revision }}

      - name: Configure AWS credentials (OIDC)
        if: ${{ contains(needs.prepare.outputs.platforms, matrix.os) }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::400389109701:role/GHA-entropy-DeployRole
          aws-region: us-east-1

      - name: Set up Java 21 & cache Maven
        if: ${{ contains(needs.prepare.outputs.platforms, matrix.os) }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      - name: Extract versions
        if: ${{ contains(needs.prepare.outputs.platforms, matrix.os) }}
        id: extract-version
        run: |
          BASE=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          BUILD="${BASE}.${{ github.run_number }}"
          echo "VERSION=$BASE" >> $GITHUB_ENV
          echo "BUILD_VERSION=$BUILD" >> $GITHUB_ENV
          echo "Using BUILD_VERSION=$BUILD (from $BASE)"

      - name: Build & Upload for ${{ matrix.os }}
        if: ${{ contains(needs.prepare.outputs.platforms, matrix.os) }}
        id: upload
        run: |
          set -o pipefail

          ARTIFACT="entropy-${BUILD_VERSION}-${{ matrix.os }}.jar"
          S3_KEY="${{ needs.prepare.outputs.revision }}/${{ matrix.os }}/${ARTIFACT}"
          S3_URI="s3://${S3_BUCKET}/${S3_KEY}"

          if aws s3 ls "s3://$S3_BUCKET/${{ needs.prepare.outputs.revision }}/${{ matrix.os }}/" | grep -q '\.jar'; then
            echo "BUILD_RESULT=skipped" >> $GITHUB_ENV
            echo "✔️ Artifact already exists in S3. Skipping build."

            # Identify the existing file name
            EXISTING_ARTIFACT=$(aws s3 ls "s3://$S3_BUCKET/${{ needs.prepare.outputs.revision }}/${{ matrix.os }}/" | awk '{print $4}' | grep '\.jar')
            EXISTING_VERSION=$(echo "$EXISTING_ARTIFACT" | sed -E 's/^entropy-([0-9]+\.[0-9]+\.[0-9]+-[A-Z]+\.[0-9]+)-[a-z]+\.jar$/\1/')
            echo "Existing artifact found: $EXISTING_ARTIFACT"
            echo "BUILD_VERSION=$EXISTING_VERSION" >> $GITHUB_ENV

            # Update environment variables to point to the existing artifact
            S3_KEY="${{ needs.prepare.outputs.revision }}/${{ matrix.os }}/$EXISTING_ARTIFACT"
            S3_URI="s3://${S3_BUCKET}/${S3_KEY}"
            ARTIFACT="$EXISTING_ARTIFACT"
          else
            echo "BUILD_RESULT=built" >> $GITHUB_ENV
            echo "🚧 Building artifact for ${{ matrix.os }}..."
            mvn clean package -P${{ matrix.os }} -Dbuild.revision="$BUILD_VERSION"

            echo "📤 Uploading to $S3_URI"
            aws s3 cp "target/$ARTIFACT" "$S3_URI"

            if [ $? -eq 0 ]; then
              echo "✔️ Successfully uploaded build to S3"
            else
              echo "❌ Failed to upload build to S3"
              exit 1
            fi
          fi

          echo "S3_ARTIFACT_URI=$S3_URI" >> $GITHUB_ENV

          echo "📦 Artifact: $ARTIFACT"
          echo "📤 S3 URI: $S3_URI"

      - name: Verify S3 contents
        if: ${{ contains(needs.prepare.outputs.platforms, matrix.os) }}
        id: verify-s3
        run: |
          # Extract full S3 key from the URI
          ARTIFACT_KEY="${S3_ARTIFACT_URI#s3://$S3_BUCKET/}"

          echo "🔍 Verifying existence of S3 object: s3://$S3_BUCKET/$ARTIFACT_KEY"

          if aws s3api head-object --bucket "$S3_BUCKET" --key "$ARTIFACT_KEY" 2>/dev/null; then
            echo "✔️ Artifact verified in S3"
            echo "VERIFY_STATUS=success" >> $GITHUB_ENV
          else
            echo "❌ Artifact missing or inaccessible"
            echo "VERIFY_STATUS=failure" >> $GITHUB_ENV
            exit 1
          fi

      - name: Emit summary details
        if: ${{ contains(needs.prepare.outputs.platforms, matrix.os) }}
        id: summary
        run: |
          {
            echo "## 📦 Artifact Summary: \`${{ matrix.os }}\`"
            echo ""
            echo "- **Version:** \`${BUILD_VERSION}\`"
            echo "- **Build Status:** $([[ $BUILD_RESULT == built ]] && echo '✅ Built' || echo '⚠️ Skipped')"
            echo "- **S3 Verification Status:** $([[ $VERIFY_STATUS == success ]] && echo '✅ Verified S3 artifact(s)' || echo '❌ Failed S3 artifact verification')"
            echo "- **URI:** \`${S3_ARTIFACT_URI}\`"
          } >> $GITHUB_STEP_SUMMARY
